import numpy as np

class logistic_regression:
    def __init__(self):
        self.X = None 
        self.y = None
        self.theta = None
        self.learning_rate = 0.01
        self.epoch = 100000
        
    def step_function(self, z):
        return 1 if z >= 0.5 else 0
    
    def sigmoid(self, z):
        return 1 / (1 + np.exp(-z))
    
    def fit(self, X, y):
        self.X = X
        self.y = y
        # Adding bias term
        X = np.c_[np.ones(X.shape[0]), X]
        self.theta = np.zeros(X.shape[1]) 
        
        for i in range(self.epoch):
            y_pred = self.sigmoid(np.dot(X, self.theta)) 
            loss = (1 / X.shape[0]) * np.dot((y - y_pred), X)
            self.theta += self.learning_rate * loss  
        
        return self.theta
    
    def predict(self, X):
        X = np.c_[np.ones(X.shape[0]), X]  
        return np.array([self.step_function(i) for i in self.sigmoid(np.dot(X, self.theta))]) 
